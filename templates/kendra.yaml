  
Parameters:
  KendraEdition:
    Type: String
    Default: 'DEVELOPER_EDITION'
    AllowedValues:
      - 'DEVELOPER_EDITION' 
      - 'ENTERPRISE_EDITION'
    Description: DEVELOPER_EDITION or ENTERPRISE_EDITION
  DatasourceS3bucketName:
    Type: String
    Default: ''
    Description: 'S3 bucket to use as datasource'
  ExistingKendraIndex:
    Type: String
    Default: ''
    Description: '[Optional] Provide kendra Index Id If you want to add Datasources to existing Kendra Index'
  ExistingKendraIndexRole:
    Type: String
    Default: ''
    Description: '[Optional] Provide an IAM role Arn that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. If not provided, a new role will be created.'
  ExistingKendraS3DatasourceRole:
    Type: String
    Default: ''
    Description: '[Optional] Provide an IAM role Arn with permission to access the s3 data source. If not provided, a new role will be created.'
  RequireRDSDS:
    Type: String
    Default: 'FALSE'
    AllowedValues:
      - 'TRUE'
      - 'FALSE'
    Description: 'Do you need to use RDS as a Datasource? Allowed values: TRUE or FALSE'
  DatabaseEngineType:
    Type: String
    Description: "RDS_AURORA_MYSQL | RDS_AURORA_POSTGRESQL | RDS_MYSQL | RDS_POSTGRESQL"
    Default: ''
    AllowedValues:
      - 'RDS_AURORA_MYSQL'  
      - 'RDS_AURORA_POSTGRESQL' 
      - 'RDS_MYSQL' 
      - 'RDS_POSTGRESQL'
      - ''
  ExistingRDSDatasourceRole:
    Type: String
    Default: ''
    Description: "[Optional] Provide an IAM role Arn with permission to access the RDS database. If not provided, a new role will be created"
  ChangeDetectingColumns:
    Type: String
    Default: ''
    Description: 'One to Five Columns that indicate when a document in the database has changed. Default value is one column id'
  DocumentDataColumnName:
    Type: String
    Default: ''
    Description: "The column that contains the contents of the document"
  DocumentIdColumnName:
    Type: String
    Default: ''
    Description: "The column that provides the document unique identifier.This could be same as ChangeDetectingColumns"
  SecretArn:
    Type: String
    Default: ''
    Description: 'The Amazon Resource Name (ARN) of credentials stored in AWS Secrets Manager. The credentials should be a user/password pair.'
  DatabaseHost:
    Type: String
    Default: ''
    Description: 'The name of the host for the database. Can be either a string (host.subdomain.domain.tld) or an IPv4 or IPv6 address..'
  DatabaseName:
    Type: String
    Default: ''
    Description: 'The name of the database containing the document data.'
  DatabasePort:
    Type: String
    Default: ''
    Description: 'The port that the database uses for connections.'
  TableName:
    Type: String
    Default: ''
    Description: "The column that provides the documents unique identifier.This could be same as ChangeDetectingColumns"
  SecurityGroupIds:
    Type: String
    Default: ''
    Description: 'A list of identifiers of security groups within your Amazon VPC. The security groups should enable Amazon Kendra to connect to the data source.'
  SubnetIds:
    Type: String
    Default: ''
    Description: 'A list of identifiers for subnets within your Amazon VPC. The subnets should be able to connect to each other in the VPC, and they should have outgoing access to the Internet through a NAT device.'
    
Conditions:
  indexnotexists: !Equals 
        - !Ref ExistingKendraIndex
        - ''
  indexrolenotexists: !Equals 
        - !Ref ExistingKendraIndexRole
        - ''
  s3dsrolenotexists: !Equals 
        - !Ref ExistingKendraS3DatasourceRole
        - ''
  rdsdsrolenotexists: !Equals 
        - !Ref ExistingRDSDatasourceRole
        - ''
  userdsds: !Equals
        - !Ref RequireRDSDS
        - TRUE
  createrdsrole: !And
        - !Condition userdsds
        - !Condition rdsdsrolenotexists

Rules:
  CheckRDSParameteres:
    RuleCondition: !Equals 
      - !Ref RequireRDSDS
      - TRUE
    Assertions:
      - Assert: !Not 
          - !Equals 
            - !Ref DatabaseEngineType
            - ''
        AssertDescription: 'DatabaseEngineType cannot be empty when RDS is added as a datasource. Allowed values: RDS_AURORA_MYSQL | RDS_AURORA_POSTGRESQL | RDS_MYSQL | RDS_POSTGRESQL'
      - Assert: !Not 
          - !Equals 
            - !Ref ChangeDetectingColumns
            - ''
        AssertDescription: 'ChangeDetectingColumns is mandatory when RDS is added as a datasource'
      - Assert: !Not 
          - !Equals 
            - !Ref DocumentDataColumnName
            - ''
        AssertDescription: 'DocumentDataColumnName is mandatory when RDS is added as a datasource'
      - Assert: !Not 
          - !Equals 
            - !Ref DocumentIdColumnName
            - ''
        AssertDescription: 'DocumentIdColumnName is mandatory when RDS is added as a datasource'
      - Assert: !Not 
          - !Equals 
            - !Ref DatabaseHost
            - ''
        AssertDescription: 'DatabaseHost is mandatory when RDS is added as a datasource'
      - Assert: !Not 
          - !Equals 
            - !Ref DatabaseName
            - ''
        AssertDescription: 'DatabaseName is mandatory when RDS is added as a datasource'
      - Assert: !Not 
          - !Equals 
            - !Ref DatabasePort
            - ''
        AssertDescription: 'DatabasePort is mandatory when RDS is added as a datasource'
      - Assert: !Not 
          - !Equals 
            - !Ref TableName
            - ''
        AssertDescription: 'TableName is mandatory when RDS is added as a datasource'

Resources:
  KendraIndexRole:
    Condition: indexrolenotexists
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': 'Kendra'
                Action:
                  - 'cloudwatch:PutMetricData'
              - Effect: Allow
                Resource: '*'
                Action: 'logs:DescribeLogGroups'
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:logs:${region}:${account}:log-group:/aws/kendra/*'
                  - region: !Ref 'AWS::Region'
                    account: !Ref 'AWS::AccountId'
                Action: 'logs:CreateLogGroup'
              - Effect: Allow
                Resource: !Sub
                  - 'arn:aws:logs:${region}:${account}:log-group:/aws/kendra/*:log-stream:*'
                  - region: !Ref 'AWS::Region'
                    account: !Ref 'AWS::AccountId'
                Action: 
                  - 'logs:DescribeLogStreams'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
          PolicyName: KendraIndexPolicy
  KendraS3DatasourceRole:
    Type: 'AWS::IAM::Role'
    Condition: s3dsrolenotexists
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                - s3:GetObject
                - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${DatasourceS3bucketName}/*'
                Effect: Allow
              - Action:
                - kendra:BatchPutDocument
                - kendra:BatchDeleteDocument
                Effect: Allow
                Resource: !Sub 
                  - 'arn:aws:kendra:${AWS::Region}:${AWS::AccountId}:index/${kendraindexid}'
                  - kendraindexid: !If
                    - indexnotexists
                    - !GetAtt KendraIndex.Id
                    - !Ref ExistingKendraIndex
          PolicyName: KendraIndexS3DatasourcePolicy
  KendraRDSDatasourceRole:
    Type: 'AWS::IAM::Role'
    Condition: createrdsrole
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: "sts:AssumeRole"
      Policies: 
        - PolicyDocument: 
            Statement: 
              - 
                Action: 
                  - "secretsmanager:GetSecretValue"
                Effect: Allow
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
              - 
                Action: 
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DescribeSubnets"
                  - "kms:Decrypt"
                Effect: Allow
                Resource: "*"
              - 
                Action: 
                  - kendra:BatchPutDocument
                  - kendra:BatchDeleteDocument
                Effect: Allow
                Resource: !Sub 
                  - 'arn:aws:kendra:${AWS::Region}:${AWS::AccountId}:index/${kendraindexid}'
                  - kendraindexid: !If
                    - indexnotexists
                    - !GetAtt KendraIndex.Id
                    - !Ref ExistingKendraIndex
          PolicyName: KendraIndexRDSDatasourcePolicy
  KendraIndex:
    Condition: indexnotexists
    Type: 'AWS::Kendra::Index'
    Properties:
      Edition: !Ref KendraEdition
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-Index'
      RoleArn: !If
          - indexrolenotexists
          - !GetAtt KendraIndexRole.Arn
          - !Ref ExistingKendraIndexRole
  KendraDatasourceS3:
    Type: 'AWS::Kendra::DataSource'
    Properties: 
      IndexId: !If
          - indexnotexists
          - !GetAtt KendraIndex.Id
          - !Ref ExistingKendraIndex
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-S3Datasource'
      RoleArn: !If
          - s3dsrolenotexists
          - !GetAtt KendraS3DatasourceRole.Arn
          - !Ref ExistingKendraS3DatasourceRole 
      Type: S3 #CONFLUENCE | CUSTOM | DATABASE | GOOGLEDRIVE | ONEDRIVE | S3 | SALESFORCE | SERVICENOW | SHAREPOINT | WEBCRAWLER | WORKDOCS
      # Schedule: '0 * * * *'
      DataSourceConfiguration: 
        S3Configuration: 
          BucketName: !Ref DatasourceS3bucketName
  KendraDatasourceRDS:
    Condition: userdsds
    Type: 'AWS::Kendra::DataSource'
    Properties: 
      IndexId: !If
          - indexnotexists
          - !GetAtt KendraIndex.Id
          - !Ref ExistingKendraIndex
      Name: !Join
        - ''
        - - !Ref 'AWS::StackName'
          - '-RDSDatasource'
      RoleArn: !If
          - rdsdsrolenotexists
          - !GetAtt KendraRDSDatasourceRole.Arn
          - !Ref ExistingRDSDatasourceRole 
      Type: DATABASE #CONFLUENCE | CUSTOM | DATABASE | GOOGLEDRIVE | ONEDRIVE | S3 | SALESFORCE | SERVICENOW | SHAREPOINT | WEBCRAWLER | WORKDOCS
      # Schedule: '0 * * * *'
      DataSourceConfiguration: 
        DatabaseConfiguration: 
            ColumnConfiguration: 
                ChangeDetectingColumns: !Split [",", !Ref ChangeDetectingColumns] 
                DocumentDataColumnName: !Ref DocumentDataColumnName
                DocumentIdColumnName: !Ref DocumentIdColumnName
                # FieldMappings: 
                #   - DataSourceFieldName: String
                #     IndexFieldName: String
                #   - DataSourceFieldName: String
                #     IndexFieldName: String
            ConnectionConfiguration: 
                DatabaseHost: !Ref DatabaseHost
                DatabaseName: !Ref DatabaseName
                DatabasePort: !Ref DatabasePort
                SecretArn: !Ref SecretArn
                TableName: !Ref TableName
            DatabaseEngineType: !Ref DatabaseEngineType  
            VpcConfiguration: 
                SecurityGroupIds: !Split [",", !Ref SecurityGroupIds]
                SubnetIds: !Split [",", !Ref SubnetIds]
  
Outputs:
  KendraIndexId:
    Value: !GetAtt KendraIndex.Id
  KendraDatasourceS3:
    Value: !GetAtt KendraDatasourceS3.Arn
  KendraDatasourceRDS:
    Value: !GetAtt KendraDatasourceRDS.Arn
  KendraIndexRole:
    Value: !GetAtt KendraIndexRole.Arn
  KendraS3DatasourceRole:
    Value: !GetAtt KendraS3DatasourceRole.Arn
  KendraRDSDatasourceRole:
    Value: !GetAtt KendraRDSDatasourceRole.Arn
  
  